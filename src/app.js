// Generated by CoffeeScript 1.4.0
(function() {
  var Animation;

  Animation = (function() {

    function Animation(data, textures, initAnim, interactive) {
      var anim, animName, img, toturl, _i, _len, _ref;
      if (interactive == null) {
        interactive = false;
      }
      this.anims = {};
      for (animName in data) {
        anim = data[animName];
        this.anims[animName] = {
          "name": animName,
          "leadTo": anim.leadTo,
          "imgs": [],
          "nb": anim.imgs.length
        };
        _ref = anim.imgs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          img = _ref[_i];
          toturl = anim.dir + img.file;
          if (!textures[toturl]) {
            textures[toturl] = PIXI.Texture.fromImage(toturl);
          }
          img.texture = textures[toturl];
          this.anims[animName].imgs.push(img);
        }
      }
      this.currentAnim = this.anims[initAnim];
      this.nextAnim = null;
      this.currentImg = 0;
      this.sprite = new PIXI.Sprite(this.currentAnim.imgs[this.currentImg].texture);
      this.lastTime = 0;
      this.pos = {
        "x": 0,
        "y": 0
      };
      if (interactive) {
        this.sprite.setInteractive(true);
      }
    }

    Animation.prototype.loadAnimation = function(anim, force) {
      if (force == null) {
        force = false;
      }
      this.nextAnim = anim;
      if (force) {
        this.currentImg = this.currentAnim.nb - 1;
        return this.nextImg();
      }
    };

    Animation.prototype.move = function(dx, dy, absolute) {
      if (absolute == null) {
        absolute = false;
      }
      if (absolute) {
        this.pos.x = dx;
        return this.pos.y = dy;
      } else {
        this.pos.x += dx;
        return this.pos.y += dy;
      }
    };

    Animation.prototype.addTo = function(stage) {
      return stage.addChild(this.sprite);
    };

    Animation.prototype.removeFrom = function(stage) {
      return stage.removeChild(this.sprite);
    };

    Animation.prototype.nextImg = function() {
      this.currentImg++;
      if (this.currentImg >= this.currentAnim.nb) {
        this.currentImg = 0;
        if (this.nextAnim !== null) {
          this.currentAnim = this.anims[this.nextAnim];
          this.nextAnim = null;
        } else if (this.currentAnim.leadTo !== this.currentAnim.name) {
          this.currentAnim = this.anims[this.currentAnim.leadTo];
        }
      }
      return this.sprite.setTexture(this.currentAnim.imgs[this.currentImg].texture);
    };

    Animation.prototype.updateAnimation = function(dt) {
      this.lastTime += dt;
      if (this.lastTime >= this.currentAnim.imgs[this.currentImg].duration) {
        this.nextImg();
        this.lastTime -= this.currentAnim.imgs[this.currentImg].duration;
      }
      this.sprite.position.x = window.widthFactor * this.pos.x;
      return this.sprite.position.y = window.heightFactor * this.pos.y;
    };

    return Animation;

  })();

  $(function() {
    var animate, bunny, canala, canala1, canala2, canalb, canalb1, canalb2, getElapsedTime, getTime, heightFactor, interactive, lastTime, mainc, metalman, onTheFloor, renderer, scroll, stage, textures, themagnet, widthFactor, winDimensions,
      _this = this;
    textures = {};
    interactive = true;
    winDimensions = window.winDimensions = {
      "width": 400,
      "height": 250
    };
    widthFactor = window.widthFactor = 1;
    heightFactor = window.heightFactor = 1;
    stage = new PIXI.Stage(0x000000, interactive);
    renderer = PIXI.autoDetectRenderer(winDimensions.width, winDimensions.height);
    mainc = document.getElementById("canvashere");
    mainc.appendChild(renderer.view);
    canala = PIXI.Texture.fromImage("img/canala.png");
    canalb = PIXI.Texture.fromImage("img/canalb.png");
    bunny = new PIXI.Sprite(PIXI.Texture.fromImage("img/bunny.png"));
    canala1 = new PIXI.Sprite(canala);
    canala2 = new PIXI.Sprite(canala);
    canalb1 = new PIXI.Sprite(canalb);
    canalb2 = new PIXI.Sprite(canalb);
    bunny.anchor.x = 0.5;
    bunny.anchor.y = 0.5;
    bunny.position.x = 320;
    bunny.position.y = 80;
    canala2.position.x = renderer.width;
    canalb2.position.x = renderer.width;
    stage.addChild(canalb1);
    stage.addChild(canalb2);
    stage.addChild(canala1);
    stage.addChild(canala2);
    stage.addChild(bunny);
    scroll = 3;
    onTheFloor = 172;
    themagnet = null;
    metalman = null;
    $.getJSON("anims/themagnet.json", function(data) {
      themagnet = new Animation(data, textures, "running", true);
      themagnet.pos = {
        "x": 50,
        "y": onTheFloor
      };
      themagnet.sprite.click = themagnet.sprite.tap = function(e) {
        return themagnet.loadAnimation("mortelec", true);
      };
      themagnet.addTo(stage);
      return $.getJSON("anims/metalman.json", function(data) {
        metalman = new Animation(data, textures, "running", true);
        metalman.pos = {
          "x": 150,
          "y": onTheFloor
        };
        metalman.isJumping = false;
        metalman.sprite.click = metalman.sprite.tap = function(e) {
          metalman.loadAnimation("startjumping", true);
          return metalman.isJumping = 0;
        };
        metalman.addTo(stage);
        return animate();
      });
    });
    getTime = function() {
      return new Date().valueOf() / 1000;
    };
    lastTime = getTime() - 0.016;
    getElapsedTime = function() {
      var dt, now;
      now = getTime();
      dt = now - lastTime;
      lastTime = now;
      return dt;
    };
    return animate = function() {
      var dt;
      requestAnimFrame(animate);
      dt = getElapsedTime();
      themagnet.updateAnimation(dt);
      metalman.updateAnimation(dt);
      bunny.rotation += scroll / 100;
      canala1.position.x -= scroll;
      canala2.position.x -= scroll;
      if (canala2.position.x <= 0) {
        canala1.position.x = canala2.position.x;
        canala2.position.x = renderer.width + canala2.position.x;
      }
      canalb1.position.x -= scroll / 2;
      canalb2.position.x -= scroll / 2;
      if (canalb2.position.x <= 0) {
        canalb1.position.x = canalb2.position.x;
        canalb2.position.x = renderer.width + canalb2.position.x;
      }
      if (metalman.isJumping !== false) {
        metalman.isJumping += 0.017;
        if (metalman.isJumping < 0.4) {
          metalman.pos.y -= 8 - 20 * metalman.isJumping;
        } else if (metalman.isJumping < 0.8) {
          metalman.pos.y += 20 * (metalman.isJumping - 0.4);
          metalman.loadAnimation("landing", true);
        } else {
          metalman.isJumping = false;
          metalman.pos.y = onTheFloor;
          metalman.loadAnimation("running", true);
        }
      }
      return renderer.render(stage);
    };
  });

}).call(this);
